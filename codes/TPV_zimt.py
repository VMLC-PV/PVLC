###################################################
########## Simulate TPV using ZimT ################
###################################################
# by Vincent M. Le Corre
# Package import
import os,sys,platform,tqdm,parmap,multiprocessing,warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.lines import Line2D
from scipy.integrate import simps
from scipy.optimize import curve_fit
from scipy import constants
from time import time
from itertools import repeat
# Don't show warnings
warnings.filterwarnings("ignore")
# # Homemade package import
# import plot_settings_screen
# from VLC_useful_func import sci_notation,run_zimt,zimt_tj_plot,zimt_Voltage_transient_plot,Store_output_in_folder,clean_up_output
# from tVG_gen import zimt_TPV
# Import homemade package by VLC
from VLC_units.plots.ZimT_plots import *
from VLC_units.simu.runsim import *
from VLC_units.simu.get_input_par import *
from VLC_units.make_tVG.tVG_gen import *
from VLC_units.cleanup_folder.clean_folder import *


# Main Program
def TPV(fixed_str = None, input_dic = None, path2ZimT = None, run_simu = True, plot_tjs = True, move_ouput_2_folder = True, Store_folder = 'TPV',clean_output = False,verbose = True):  
    """Run TPV simulation using ZimT

    Parameters
    ----------
    fixed_str : str, optional
        Add any fixed string to the simulation command for zimt, by default None.
    input_dic : dict, optional
        Dictionary with the input for the zimt_TPVV function (see tVG_gen.py), by default None.
    path2ZimT : str, optional
        Path to ZimT, by default None
    run_simu : bool, optional
        Rerun simu?, by default True
    plot_tjs : bool, optional
        make plot ?, by default True
    move_ouput_2_folder : bool, optional
        Move output to folder?, by default True
    Store_folder : str, optional
        Folder name for storing output, by default 'TPV'
    clean_output : bool, optional
        Clean up output?, by default False
    verbose : bool, optional
        Verbose?, by default True
    """      

    ## General Inputs
    warnings.filterwarnings("ignore")           # Don't show warnings
    system = platform.system()                  # Operating system
    max_jobs = os.cpu_count()-2                 # Max number of parallel simulations (for number of CPU use: os.cpu_count() )
    do_multiprocessing = True                      # Use multiprocessing
    if system == 'Windows':                     # cannot easily do multiprocessing in Windows
            max_jobs = 1
            do_multiprocessing = False
            try:                                # kill all running jobs to avoid conflicts
                os.system('taskkill.exe /F /IM zimt.exe')
            except:
                pass

    slash = '/'
    curr_dir = os.getcwd()              # Current working directory
    if path2ZimT is None:
        path2ZimT = os.path.join(os.getcwd(),'Simulation_program/SIMsalabim_v425/ZimT')                  # Path to ZimT in curr_dir

 
    ## Physics constants
    q = constants.value(u'elementary charge')

    # TPV input
    # see zimt_CELIV in tVG_gen.py
    if input_dic is None:
        tmin = 1e-8                                     # First time step after 0 [s]
        tmax = 1                                        # Final time step [s]
        Gens = [1e22]                                   # Total number of carrier generated by the gaussian pulse [m^-3]
        G0s = [1e25]                                    # Background generation rate (i.e. light intensity) [m^-3 s^-1]
        tpulse = 5e-8                                   # Middle of the gaussian laser pulse [s]
        steps = 100                                    # Number of time steps
    else:
        if 'tmin' in input_dic.keys():
            tmin = input_dic['tmin']
        if 'tmax' in input_dic.keys():
            tmax = input_dic['tmax']
        if 'Gens' in input_dic.keys():
            Gens = input_dic['Gens']
        if 'G0s' in input_dic.keys():
            G0s = input_dic['G0s']
        if 'tpulse' in input_dic.keys():
            tpulse = input_dic['tpulse']
        if 'steps' in input_dic.keys():
            steps = input_dic['steps']

    # Initialize 
    code_name_lst,str_lst,path_lst,tj_lst,tVG_lst = [],[],[],[],[]
    idx = 0
    start = time()

    # Figures control
    size_fig = (16, 12)
    num_fig_tjs= 0
    colors = cm.viridis((np.linspace(0,1,max(len(Gens),4)+1)) ) # Color range for plotting
    f_tjs = plt.figure(num_fig_tjs,figsize=size_fig)

    if run_simu:           
        # Generate tVG files and str_lst for light pulse simulation
        for Gen in Gens:
            for G0 in G0s:
                zimt_TPV(tmin,tmax,Gen,G0,tpulse,steps=100,time_exp = True, tVG_name=os.path.join(path2ZimT,'tVG_TPV_G_{:.1e}_G0_{:.2e}.txt'.format(Gen,G0)))
                str_lst.append(' -tVG_file tVG_TPV_G_{:.1e}_G0_{:.2e}.txt -tj_file tj_TPV_G_{:.1e}_G0_{:.2e}.dat'.format(Gen,G0,Gen,G0))
                code_name_lst.append('zimt')
                path_lst.append(path2ZimT)
                tVG_lst.append('tVG_TPV_G_{:.1e}_G0_{:.2e}.txt'.format(Gen,G0))
                tj_lst.append('tj_TPV_G_{:.1e}_G0_{:.2e}.dat'.format(Gen,G0))
        
 
        # Run ZimT
        if do_multiprocessing:
            run_multiprocess_simu(run_code,code_name_lst,path_lst,str_lst,max_jobs)
        else:
            for i in range(len(str_lst)):
                run_code(code_name_lst[i],path_lst[i],str_lst[i],show_term_output=True,verbose=verbose)
         
    print('Calculation time {:.2f} s'.format(time() - start)) # Time in seconds

    ## Move output folder to new folder
    if move_ouput_2_folder: # Move outputs to Store_folder
        Store_output_in_folder(tVG_lst,Store_folder,path2ZimT)
        Store_output_in_folder(tj_lst,Store_folder,path2ZimT)

    ########################################################
    ################## JVs_file ############################
    ########################################################
    if plot_tjs:
        for G0 in G0s:
            idx = 0
            for Gen in Gens:
                data_tj = pd.read_csv(os.path.join(path2ZimT,Store_folder,'tj_TPV_G_{:.1e}_G0_{:.2e}.dat'.format(Gen,G0)),delim_whitespace=True)
                zimt_Voltage_transient_plot(num_fig_tjs,data_tj,y=['Vext'],xlimits=[-1e-4,1e-3],colors=colors[idx],plot_type=0,save_yes=True,pic_save_name = os.path.join(path2ZimT,Store_folder,'transient.jpg')) 
                idx += 1

    ########################################################
    plt.show()
    ## Clean-up outputs from folder
    if clean_output: # delete all outputs
        clean_up_output('tj',os.path.join(path2ZimT,Store_folder))
        clean_up_output('tVG',os.path.join(path2ZimT,Store_folder))
        print('Ouput data was deleted from '+os.path.join(path2ZimT,Store_folder))

    

    
    print('Elapsed time {:.2f} s'.format(time() - start)) # Time in seconds

if __name__ == '__main__':
    TPV()